// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: cart-items.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "cart_items";

export interface CreateRequest {
  createCartItemDto: CreateCartItemDto | undefined;
  userId: string;
}

export interface CreateCartItemDto {
  productId: string;
  quantity: number;
}

export interface CartItem {
  id: string;
  productId: string;
  quantity: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface FindAllRequest {
  userId: string;
}

export interface FindAllResponse {
  cartItems: CartItem[];
}

export interface FindOneRequest {
  id: string;
  userId: string;
}

export interface UpdateRequest {
  id: string;
  updateCartItemDto: UpdateCartItemDto | undefined;
  userId: string;
}

export interface UpdateCartItemDto {
  productId: string;
  quantity: number;
}

export interface RemoveRequest {
  id: string;
  userId: string;
}

export interface RemoveAllRequest {
  userId: string;
}

export interface RemoveAllResponse {
}

export interface CreateManyRequest {
  createCartItemDtos: CreateCartItemDto[];
  userId: string;
}

export interface CreateManyResponse {
}

export interface FindByProductIdRequest {
  productId: string;
}

export interface FindByProductIdResponse {
  cartItems: CartItem[];
}

export const CART_ITEMS_PACKAGE_NAME = "cart_items";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface CartItemsServiceClient {
  create(request: CreateRequest): Observable<CartItem>;

  findAll(request: FindAllRequest): Observable<FindAllResponse>;

  findOne(request: FindOneRequest): Observable<CartItem>;

  update(request: UpdateRequest): Observable<CartItem>;

  remove(request: RemoveRequest): Observable<CartItem>;

  removeAll(request: RemoveAllRequest): Observable<RemoveAllResponse>;

  createMany(request: CreateManyRequest): Observable<CreateManyResponse>;

  findByProductId(request: FindByProductIdRequest): Observable<FindByProductIdResponse>;
}

export interface CartItemsServiceController {
  create(request: CreateRequest): Promise<CartItem> | Observable<CartItem> | CartItem;

  findAll(request: FindAllRequest): Promise<FindAllResponse> | Observable<FindAllResponse> | FindAllResponse;

  findOne(request: FindOneRequest): Promise<CartItem> | Observable<CartItem> | CartItem;

  update(request: UpdateRequest): Promise<CartItem> | Observable<CartItem> | CartItem;

  remove(request: RemoveRequest): Promise<CartItem> | Observable<CartItem> | CartItem;

  removeAll(request: RemoveAllRequest): Promise<RemoveAllResponse> | Observable<RemoveAllResponse> | RemoveAllResponse;

  createMany(
    request: CreateManyRequest,
  ): Promise<CreateManyResponse> | Observable<CreateManyResponse> | CreateManyResponse;

  findByProductId(
    request: FindByProductIdRequest,
  ): Promise<FindByProductIdResponse> | Observable<FindByProductIdResponse> | FindByProductIdResponse;
}

export function CartItemsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "create",
      "findAll",
      "findOne",
      "update",
      "remove",
      "removeAll",
      "createMany",
      "findByProductId",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CartItemsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CartItemsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CART_ITEMS_SERVICE_NAME = "CartItemsService";
