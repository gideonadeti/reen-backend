// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "products";

export interface CreateProductDto {
  name: string;
  description: string;
  price: number;
  quantity: number;
  imageUrls: string[];
}

export interface CreateRequest {
  createProductDto: CreateProductDto | undefined;
  adminId: string;
}

export interface FindAllRequest {
  name?: string | undefined;
  minPrice?: number | undefined;
  maxPrice?: number | undefined;
  minQuantity?: number | undefined;
  maxQuantity?: number | undefined;
  sortBy?: string | undefined;
  order?: string | undefined;
  limit?: number | undefined;
  page?: number | undefined;
}

export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  quantity: number;
  imageUrls: string[];
  adminId: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Meta {
  total: number;
  page: number;
  lastPage: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

export interface FindAllResponse {
  products: Product[];
  meta: Meta | undefined;
}

export interface FindOneRequest {
  id: string;
}

export interface UpdateProductDto {
  name?: string | undefined;
  description?: string | undefined;
  price?: number | undefined;
  quantity?: number | undefined;
  imageUrls: string[];
}

export interface UpdateRequest {
  id: string;
  updateProductDto: UpdateProductDto | undefined;
  adminId: string;
}

export interface RemoveRequest {
  id: string;
  adminId: string;
}

export interface FindByIdsRequest {
  ids: string[];
}

export interface FindByIdsResponse {
  products: Product[];
}

export interface CartItem {
  id: string;
  productId: string;
  quantity: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface UpdateQuantitiesRequest {
  cartItems: CartItem[];
  increment: boolean;
}

export interface UpdateAdminIdRequest {
  id: string;
  newAdminId: string;
}

export interface FindAllByAdminIdRequest {
  adminId: string;
}

export interface FindAllByAdminIdResponse {
  products: Product[];
}

export interface RemoveByIdsRequest {
  ids: string[];
}

export interface UpdateAdminIdByIdsRequest {
  ids: string[];
  newAdminId: string;
}

export interface Empty {
}

export const PRODUCTS_PACKAGE_NAME = "products";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface ProductsServiceClient {
  create(request: CreateRequest): Observable<Product>;

  findAll(request: FindAllRequest): Observable<FindAllResponse>;

  findOne(request: FindOneRequest): Observable<Product>;

  findByIds(request: FindByIdsRequest): Observable<FindByIdsResponse>;

  update(request: UpdateRequest): Observable<Product>;

  remove(request: RemoveRequest): Observable<Product>;

  updateQuantities(request: UpdateQuantitiesRequest): Observable<Empty>;

  updateAdminId(request: UpdateAdminIdRequest): Observable<Product>;

  findAllByAdminId(request: FindAllByAdminIdRequest): Observable<FindAllByAdminIdResponse>;

  removeByIds(request: RemoveByIdsRequest): Observable<Empty>;

  updateAdminIdByIds(request: UpdateAdminIdByIdsRequest): Observable<Empty>;
}

export interface ProductsServiceController {
  create(request: CreateRequest): Promise<Product> | Observable<Product> | Product;

  findAll(request: FindAllRequest): Promise<FindAllResponse> | Observable<FindAllResponse> | FindAllResponse;

  findOne(request: FindOneRequest): Promise<Product> | Observable<Product> | Product;

  findByIds(request: FindByIdsRequest): Promise<FindByIdsResponse> | Observable<FindByIdsResponse> | FindByIdsResponse;

  update(request: UpdateRequest): Promise<Product> | Observable<Product> | Product;

  remove(request: RemoveRequest): Promise<Product> | Observable<Product> | Product;

  updateQuantities(request: UpdateQuantitiesRequest): Promise<Empty> | Observable<Empty> | Empty;

  updateAdminId(request: UpdateAdminIdRequest): Promise<Product> | Observable<Product> | Product;

  findAllByAdminId(
    request: FindAllByAdminIdRequest,
  ): Promise<FindAllByAdminIdResponse> | Observable<FindAllByAdminIdResponse> | FindAllByAdminIdResponse;

  removeByIds(request: RemoveByIdsRequest): Promise<Empty> | Observable<Empty> | Empty;

  updateAdminIdByIds(request: UpdateAdminIdByIdsRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function ProductsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "create",
      "findAll",
      "findOne",
      "findByIds",
      "update",
      "remove",
      "updateQuantities",
      "updateAdminId",
      "findAllByAdminId",
      "removeByIds",
      "updateAdminIdByIds",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCTS_SERVICE_NAME = "ProductsService";
