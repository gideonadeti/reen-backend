// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v3.21.12
// source: products.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "products";

export interface CreateProductDto {
  name: string;
  price: number;
  quantity: number;
}

export interface CreateRequest {
  createProductDto: CreateProductDto | undefined;
  adminId: string;
}

export interface CreateResponse {
  id: string;
  name: string;
  price: number;
  quantity: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface FindAllRequest {
  name: string;
  minPrice: number;
  maxPrice: number;
  minQuantity: number;
  maxQuantity: number;
  sortBy: string;
  order: string;
  limit: number;
  page: number;
}

export interface Product {
  id: string;
  name: string;
  price: number;
  quantity: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Meta {
  total: number;
  page: number;
  lastPage: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

export interface FindAllResponse {
  products: Product[];
  meta: Meta | undefined;
}

export interface FindOneRequest {
  id: string;
}

export const PRODUCTS_PACKAGE_NAME = "products";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface ProductsServiceClient {
  create(request: CreateRequest): Observable<CreateResponse>;

  findAll(request: FindAllRequest): Observable<FindAllResponse>;

  findOne(request: FindOneRequest): Observable<Product>;
}

export interface ProductsServiceController {
  create(request: CreateRequest): Promise<CreateResponse> | Observable<CreateResponse> | CreateResponse;

  findAll(request: FindAllRequest): Promise<FindAllResponse> | Observable<FindAllResponse> | FindAllResponse;

  findOne(request: FindOneRequest): Promise<Product> | Observable<Product> | Product;
}

export function ProductsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findAll", "findOne"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCTS_SERVICE_NAME = "ProductsService";
