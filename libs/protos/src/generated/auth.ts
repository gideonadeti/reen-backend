// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export enum UserRole {
  /** NADMIN - Non-Admin */
  NADMIN = 0,
  ADMIN = 1,
  UNRECOGNIZED = -1,
}

export interface SignUpRequest {
  name: string;
  email: string;
  password: string;
}

export interface SignUpResponse {
  refreshToken: string;
  accessToken: string;
  user: User | undefined;
}

export interface User {
  id: string;
  name: string;
  email: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  role: UserRole;
}

export interface ValidateUserRequest {
  email: string;
  pass: string;
}

export const AUTH_PACKAGE_NAME = "auth";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface AuthServiceClient {
  signUp(request: SignUpRequest): Observable<SignUpResponse>;

  validateUser(request: ValidateUserRequest): Observable<User>;

  signIn(request: User): Observable<SignUpResponse>;
}

export interface AuthServiceController {
  signUp(request: SignUpRequest): Promise<SignUpResponse> | Observable<SignUpResponse> | SignUpResponse;

  validateUser(request: ValidateUserRequest): Promise<User> | Observable<User> | User;

  signIn(request: User): Promise<SignUpResponse> | Observable<SignUpResponse> | SignUpResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["signUp", "validateUser", "signIn"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
