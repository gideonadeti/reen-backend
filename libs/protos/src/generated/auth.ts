// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export enum UserRole {
  /** NADMIN - Non-Admin */
  NADMIN = 0,
  ADMIN = 1,
  ANONYMOUS = 2,
  UNRECOGNIZED = -1,
}

export interface SignUpRequest {
  name: string;
  email: string;
  password?: string | undefined;
  clerkId?: string | undefined;
}

export interface SignUpInResponse {
  refreshToken: string;
  accessToken: string;
  user: User | undefined;
}

export interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
  balance: number;
  salesCount: number;
  purchasesCount: number;
  amountGained: number;
  amountSpent: number;
  password?: string | undefined;
  clerkId?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Balance {
  id: string;
  userId: string;
  amount: number;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface ValidateUserRequest {
  email: string;
  pass: string;
}

export interface RefreshTokenRequest {
  user: User | undefined;
  refreshToken: string;
}

export interface RefreshTokenResponse {
  accessToken: string;
}

export interface SignOutRequest {
  userId: string;
}

export interface SignOutResponse {
  id: string;
  userId: string;
  value: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface FindUserRequest {
  id: string;
}

export interface FindAdminsRequest {
  adminIds: string[];
}

export interface FindAdminsResponse {
  admins: User[];
}

export interface UpdateUserRoleRequest {
  id: string;
  role: UserRole;
}

export interface FindUserByClerkIdRequest {
  clerkId: string;
}

export interface FindByIdsRequest {
  ids: string[];
}

export interface FindByIdsResponse {
  users: User[];
}

export interface UpdateFinancialInfosRequest {
  userId: string;
  adminId: string;
  amount: number;
  userNewBalance: number;
  adminNewBalance: number;
  idempotencyKey: string;
}

export interface RemoveIdempotencyRecordsByKeysRequest {
  keys: string[];
}

export interface FindAllResponse {
  users: User[];
}

export interface UpdatePurchasesAndSalesCountsRequest {
  userId: string;
  adminIds: string[];
}

export interface ChargeFeeRequest {
  userId: string;
  amount: number;
}

export interface UpdateNameAndEmailRequest {
  id: string;
  name: string;
  email: string;
}

export interface RemoveRequest {
  id: string;
}

export interface Empty {
}

export const AUTH_PACKAGE_NAME = "auth";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface AuthServiceClient {
  signUp(request: SignUpRequest): Observable<SignUpInResponse>;

  validateUser(request: ValidateUserRequest): Observable<User>;

  signIn(request: User): Observable<SignUpInResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

  signOut(request: SignOutRequest): Observable<SignOutResponse>;

  findUser(request: FindUserRequest): Observable<User>;

  findAdmins(request: FindAdminsRequest): Observable<FindAdminsResponse>;

  updateUserRole(request: UpdateUserRoleRequest): Observable<User>;

  findUserByClerkId(request: FindUserByClerkIdRequest): Observable<User>;

  findByIds(request: FindByIdsRequest): Observable<FindByIdsResponse>;

  updateFinancialInfos(request: UpdateFinancialInfosRequest): Observable<Empty>;

  removeIdempotencyRecordsByKeys(request: RemoveIdempotencyRecordsByKeysRequest): Observable<Empty>;

  findAll(request: Empty): Observable<FindAllResponse>;

  updatePurchasesAndSalesCounts(request: UpdatePurchasesAndSalesCountsRequest): Observable<Empty>;

  undoUpdateFinancialInfos(request: UpdateFinancialInfosRequest): Observable<Empty>;

  chargeFee(request: ChargeFeeRequest): Observable<Empty>;

  undoChargeFee(request: ChargeFeeRequest): Observable<Empty>;

  findOrCreateAnonymousUser(request: Empty): Observable<User>;

  updateNameAndEmail(request: UpdateNameAndEmailRequest): Observable<Empty>;

  remove(request: RemoveRequest): Observable<Empty>;
}

export interface AuthServiceController {
  signUp(request: SignUpRequest): Promise<SignUpInResponse> | Observable<SignUpInResponse> | SignUpInResponse;

  validateUser(request: ValidateUserRequest): Promise<User> | Observable<User> | User;

  signIn(request: User): Promise<SignUpInResponse> | Observable<SignUpInResponse> | SignUpInResponse;

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  signOut(request: SignOutRequest): Promise<SignOutResponse> | Observable<SignOutResponse> | SignOutResponse;

  findUser(request: FindUserRequest): Promise<User> | Observable<User> | User;

  findAdmins(
    request: FindAdminsRequest,
  ): Promise<FindAdminsResponse> | Observable<FindAdminsResponse> | FindAdminsResponse;

  updateUserRole(request: UpdateUserRoleRequest): Promise<User> | Observable<User> | User;

  findUserByClerkId(request: FindUserByClerkIdRequest): Promise<User> | Observable<User> | User;

  findByIds(request: FindByIdsRequest): Promise<FindByIdsResponse> | Observable<FindByIdsResponse> | FindByIdsResponse;

  updateFinancialInfos(request: UpdateFinancialInfosRequest): Promise<Empty> | Observable<Empty> | Empty;

  removeIdempotencyRecordsByKeys(
    request: RemoveIdempotencyRecordsByKeysRequest,
  ): Promise<Empty> | Observable<Empty> | Empty;

  findAll(request: Empty): Promise<FindAllResponse> | Observable<FindAllResponse> | FindAllResponse;

  updatePurchasesAndSalesCounts(
    request: UpdatePurchasesAndSalesCountsRequest,
  ): Promise<Empty> | Observable<Empty> | Empty;

  undoUpdateFinancialInfos(request: UpdateFinancialInfosRequest): Promise<Empty> | Observable<Empty> | Empty;

  chargeFee(request: ChargeFeeRequest): Promise<Empty> | Observable<Empty> | Empty;

  undoChargeFee(request: ChargeFeeRequest): Promise<Empty> | Observable<Empty> | Empty;

  findOrCreateAnonymousUser(request: Empty): Promise<User> | Observable<User> | User;

  updateNameAndEmail(request: UpdateNameAndEmailRequest): Promise<Empty> | Observable<Empty> | Empty;

  remove(request: RemoveRequest): Promise<Empty> | Observable<Empty> | Empty;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "signUp",
      "validateUser",
      "signIn",
      "refreshToken",
      "signOut",
      "findUser",
      "findAdmins",
      "updateUserRole",
      "findUserByClerkId",
      "findByIds",
      "updateFinancialInfos",
      "removeIdempotencyRecordsByKeys",
      "findAll",
      "updatePurchasesAndSalesCounts",
      "undoUpdateFinancialInfos",
      "chargeFee",
      "undoChargeFee",
      "findOrCreateAnonymousUser",
      "updateNameAndEmail",
      "remove",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
